{
	"info": {
		"_postman_id": "5efc7074-5460-448b-afdf-f5a7f69bcb3a",
		"name": "pp-client (local)",
		"description": "Test the Nodejs server.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21738163",
		"_collection_link": "https://cloudy-eclipse-520672.postman.co/workspace/Team-Workspace~8edbfb3a-e957-4683-8600-0af22addd11c/collection/21738163-5efc7074-5460-448b-afdf-f5a7f69bcb3a?action=share&source=collection_link&creator=21738163"
	},
	"item": [
		{
			"name": "Initialize test data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/graph/populate-test-data",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"graph",
						"populate-test-data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Initialize cache",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/clear-cache",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"clear-cache"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cache size",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Cache size is zero\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.rowCount).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/table-info",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"table-info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bad request (w/o body)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"W/o body\", function () {",
							"  pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bad request (empty query)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Empty query\", function () {",
							"  pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"query\": \"  \"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bad request (no query)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No query\", function () {",
							"  pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"test\": \"123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid query 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Not a valid Cypher query\", function () {",
							"  pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"query\": \"Hello World!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid query 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Not a valid Cypher query\", function () {",
							"  pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"query\": \"match (a :Person {name: 'Alice'}) match (b: Person {name: 'Bob'}) create (a -[:knows {years: 3}]->(b)\"\n}\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Match 1a",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are exactly six nodes\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.nodes.length).to.eql(6);",
							"});",
							"",
							"pm.test(\"From Go server\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"From Go server.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"query\": \"MATCH (n) return n\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Match 1b (cached)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are exactly six nodes\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.nodes.length).to.eql(6);",
							"});",
							"",
							"pm.test(\"From Cache\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"From Cache.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"query\": \"MATCH (n) return n\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update 1a (no db change)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"No data returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.nodes).to.be.null;;",
							"    pm.expect(jsonData.data.relationships).to.be.null;;",
							"    pm.expect(jsonData.data.paths).to.be.null;;",
							"});",
							"",
							"pm.test(\"From Go server\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"From Go server.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"query\": \"MATCH (p:Person {name: 'TEXT'}) SET p.age = 50 RETURN p\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Match 1c (still cached)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are exactly six nodes\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.nodes.length).to.eql(6);",
							"});",
							"",
							"pm.test(\"From Cache\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"From Cache.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"query\": \"MATCH (n) return n\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update 1b (db change)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are one node\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.nodes.length).to.eql(1);",
							"});",
							"",
							"pm.test(\"Frank's age updated to 50\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    // Verify the updated node (Frank)",
							"    pm.expect(jsonData.data.nodes[0].properties.name).to.equal(\"Frank\");",
							"    pm.expect(jsonData.data.nodes[0].properties.age).to.equal(50);",
							"});",
							"",
							"pm.test(\"From Go server\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"From Go server.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"query\": \"MATCH (p:Person {name: 'Frank'}) SET p.age = 50 RETURN p\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Match 1d (cache invalidation)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Frank's age is 50\", function () {",
							"    var jsonData = pm.response.json();",
							"    var nodes = jsonData.data.nodes;",
							"    var frank = nodes.find(node => node.properties.name === \"Frank\");",
							"",
							"    // Check if Frank is found and his age is 50",
							"    if (frank) {",
							"        pm.expect(frank.properties.age).to.eql(50);",
							"    } else {",
							"        throw new Error(\"Frank not found in nodes\");",
							"    }",
							"});",
							"",
							"pm.test(\"From Go server\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"From Go server.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"query\": \"MATCH (n) return n\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Match 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are exactly three relationships\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.relationships.length).to.eql(3);",
							"});",
							"",
							"pm.test(\"Nodes and paths fields are null\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.nodes).to.be.null;",
							"    pm.expect(jsonData.data.paths).to.be.null;",
							"});",
							"",
							"pm.test(\"From Go server\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"From Go server.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"query\": \"MATCH (a:Person)-[r:Knows]->(b:Person {name: 'Zaren'}) RETURN r\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Match 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API executed successfully\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are exactly nine paths\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.paths.length).to.eql(9);",
							"});",
							"",
							"pm.test(\"Nodes and relationships fields are null\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.nodes).to.be.null;",
							"    pm.expect(jsonData.data.relationships).to.be.null;",
							"});",
							"",
							"pm.test(\"From Go server\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"From Go server.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"query\": \"MATCH path = (a:Person {name: 'Alice'})-[:Knows*]->(b:Person {name: 'David'}) RETURN path\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check cache table size",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Cache size is 3\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.rowCount).to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/table-info",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"table-info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete nothing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API executed successfully\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"From Go server\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"From Go server.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"query\": \"MATCH (b:Person {name: 'TEST'}) DETACH DELETE b\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cache not changed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Cache size is 3\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.rowCount).to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/table-info",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"table-info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a node",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API executed successfully\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"From Go server\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"From Go server.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"query\": \"MATCH (b:Person {name: 'Bob'}) DETACH DELETE b\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/check-query",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"check-query"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cache invalidate again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Cache size is 0\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.rowCount).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/table-info",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"table-info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Initialize test data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/graph/populate-test-data",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"graph",
						"populate-test-data"
					]
				}
			},
			"response": []
		}
	]
}